version: "3"

networks:
  wasabi-overlay: # find a way to make this variable
    external: true

services:

  # Networking
  traefik:
    image: traefik:v2.6
    container_name: traefik
    hostname: traefik
    restart: unless-stopped
    networks:
      - $NETWORK
    ports:
      - 80:80
      - 443:443
      - 8448:8448
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $OPDIR/traefik:/etc/traefik
    labels:
      traefik.enable: true
      traefik.http.routers.dashboard.entrypoints: websecure
      traefik.http.routers.dashboard.rule: Host(`traefik.$DOMAIN`)
      traefik.http.routers.dashboard.service: api@internal
      traefik.http.routers.dashboard.middlewares: authelia@file
      flame.type: application
      flame.name: traefik
      flame.url: https://traefik.$DOMAIN
      flame.icon: traffic-light
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
      CF_DNS_API_TOKEN: $CF_DNS_API_TOKEN # for DNS challenge

  authelia:
    image: authelia/authelia:latest
    container_name: authelia
    hostname: authelia
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 9091
    volumes:
      - /opt/authelia:/config
    labels:
      traefik.enable: true
      traefik.http.routers.authelia.tls: true # why is this here?
      traefik.http.routers.authelia.entrypoints: websecure
      traefik.http.routers.authelia.rule: Host(`auth.$DOMAIN`)
      flame.type: application
      flame.name: authelia
      flame.url: https://auth.$DOMAIN
      flame.icon: shield-account
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID

  nginx:
    image: lscr.io/linuxserver/nginx:latest
    container_name: nginx
    hostname: nginx
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 443
    volumes:
      - $OPDIR/nginx:/config
    labels:
      traefik.enable: true
      traefik.http.routers.nginx-0.entrypoints: websecure
      traefik.http.routers.nginx-0.rule: Host(`$DOMAIN`)
      traefik.http.routers.nginx-0.middlewares: errorpage
      traefik.http.routers.nginx-0.priority: 2 # second-lowest priority
      traefik.http.routers.nginx-1.entrypoints: websecure
      traefik.http.routers.nginx-1.rule: Host(`$ALTDOMAIN1`)
      traefik.http.routers.nginx-1.middlewares: nginx-1@docker
      traefik.http.middlewares.nginx-1.addprefix.prefix: /$ALTDOMAIN1/
      traefik.http.routers.nginx-2.entrypoints: websecure
      traefik.http.routers.nginx-2.rule: Host(`$ALTDOMAIN2`)
      traefik.http.routers.nginx-2.middlewares: nginx-2@docker
      traefik.http.middlewares.nginx-2.addprefix.prefix: /$ALTDOMAIN2/
      traefik.http.routers.nginx-3.entrypoints: websecure
      traefik.http.routers.nginx-3.rule: Host(`$ALTDOMAIN3`)
      traefik.http.routers.nginx-3.middlewares: nginx-3@docker
      traefik.http.middlewares.nginx-3.addprefix.prefix: /$ALTDOMAIN3/
      traefik.http.routers.nginx-4.entrypoints: websecure
      traefik.http.routers.nginx-4.rule: Host(`$ALTDOMAIN4`)
      traefik.http.routers.nginx-4.middlewares: nginx-4@docker
      traefik.http.middlewares.nginx-4.addprefix.prefix: /$ALTDOMAIN4/
      traefik.http.routers.nginx-5.entrypoints: websecure
      traefik.http.routers.nginx-5.rule: Host(`$ALTDOMAIN5`)
      traefik.http.routers.nginx-5.middlewares: nginx-5@docker
      traefik.http.middlewares.nginx-5.addprefix.prefix: /$ALTDOMAIN5/
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID

  error-pages:
    image: tarampampam/error-pages:latest
    container_name: error-pages
    hostname: error-pages
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 8080
    environment:
      TEMPLATE_NAME: l7-dark
    labels:
      traefik.enable: true
      traefik.http.routers.errorpage.rule: HostRegexp(`{host:.+}`) # any host
      traefik.http.routers.errorpage.priority: 1 # lowest priority, fallback only
      traefik.http.routers.errorpage.entrypoints: websecure
      traefik.http.routers.errorpage.middlewares: errorpage
      traefik.http.middlewares.errorpage.errors.status: 400-599
      traefik.http.middlewares.errorpage.errors.service: errorpage
      traefik.http.middlewares.errorpage.errors.query: /{status}.html
      traefik.http.services.errorpage.loadbalancer.server.port: 8080


  # Monitoring & Updates
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 9090
    volumes:
      - $OPDIR/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - $OPDIR/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    labels:
      traefik.enable: true
      traefik.http.routers.prometheus.entrypoints: websecure
      traefik.http.routers.prometheus.rule: Host(`prometheus.$DOMAIN`)
      traefik.http.routers.prometheus.middlewares: authelia@file
      flame.type: application
      flame.name: prometheus
      flame.url: https://prometheus.$DOMAIN
      flame.icon: database
    environment:
      TZ: $TZ
      PUID: $PUID # does this work?
      PGID: $PGID

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-ereinion
    hostname: node-ereinion
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 9100
    command:
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor-ereinion
    hostname: cadvistor-ereinion
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    environment:
      TZ: $TZ

  loki:
    image: grafana/loki
    container_name: loki
    hostname: loki
    restart: unless-stopped
    networks:
      - $NETWORK
    ports:
      - 3100:3100 # expose for docker plugin to connect (dumb)
    environment:
      TZ: $TZ
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail
    container_name: promtail
    hostname: promtail
    restart: unless-stopped
    networks:
      - $NETWORK
    volumes:
      - /var/log:/var/log:ro
    environment:
      TZ: $TZ
    command: -config.file=/etc/promtail/config.yml

  grafana:
    image: grafana/grafana-oss:main
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    user: $PUID:$PGID
    networks:
      - $NETWORK
    expose:
      - 3000
    volumes:
      - $OPDIR/grafana:/var/lib/grafana
    labels:
      traefik.enable: true
      traefik.http.routers.grafana.entrypoints: websecure
      traefik.http.routers.grafana.rule: Host(`grafana.$DOMAIN`)
      traefik.http.routers.grafana.middlewares: authelia@file
      flame.type: application
      flame.name: grafana
      flame.url: https://grafana.$DOMAIN
      flame.icon: chart-areaspline
    environment:
      TZ: $TZ
      GF_PATHS_CONFIG: /var/lib/grafana/grafana.ini

  # Communication
  protonmail:
    image: shenxn/protonmail-bridge:latest
    container_name: protonmail
    hostname: protonmail
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 25
      - 143
    volumes:
      - $OPDIR/protonmail:/root
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID

  synapse:
    image: docker.io/matrixdotorg/synapse:latest
    container_name: synapse
    hostname: synapse
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 8008
    volumes:
      - $OPDIR/synapse:/data
    labels:
      traefik.enable: true
      traefik.http.routers.synapse.entrypoints: websecure
      traefik.http.routers.synapse.rule: Host(`synapse.$DOMAIN`)
      traefik.http.routers.synapse.service: synapse
      traefik.http.services.synapse.loadbalancer.server.port: 8008
    environment:
      TZ: $TZ
      UID: $PUID
      GID: $PGID
      SYNAPSE_CONFIG_PATH: /data/homeserver.yaml
    depends_on:
      - postgres-matrix

  postgres-matrix:
    image: docker.io/postgres:12-alpine
    container_name: postgres-synapse
    restart: unless-stopped
    user: $PUID:$PGID # postgres will not init database as 1000:1000
    networks:
      - $NETWORK
    expose:
      - 5432
    volumes:
      - $OPDIR/postgres-matrix:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: synapse
      POSTGRES_PASSWORD: $MATRIX_POSTGRES_PASSWORD
      # https://matrix-org.github.io/synapse/latest/postgres.html#set-up-database
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C

  element:
    image: vectorim/element-web:latest
    container_name: element
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 80
    volumes:
      - $OPDIR/element/config.json:/app/config.json:ro
    labels:
      traefik.enable: true
      traefik.http.routers.element.entrypoints: websecure
      traefik.http.routers.element.rule: Host(`element.$DOMAIN`)
      flame.type: application
      flame.name: element
      flame.url: https://element.$DOMAIN
      flame.icon: matrix
    environment:
      TZ: $TZ

  heisenbridge:
    image: hif1/heisenbridge:latest
    container_name: heisenbridge
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 9898
    volumes:
      - $OPDIR/synapse/heisenbridge:/data
    command: -v -c /data/heisenbridge.yaml http://synapse:8008
    depends_on:
      - synapse

  mx-puppet-groupme:
    build: https://gitlab.com/robintown/mx-puppet-groupme.git#main
    container_name: mx-puppet-groupme
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 8437
    volumes:
      - $OPDIR/synapse/mx-puppet-groupme:/data
    depends_on:
      - synapse

  matrix-hookshot:
    image: halfshot/matrix-hookshot:latest
    container_name: matrix-hookshot
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 9000 # webhooks
      - 9993 # synapse
    volumes:
      - $OPDIR/synapse/matrix-hookshot:/data
    depends_on:
      - synapse

  # Games
  wikijs:
    image: ghcr.io/requarks/wiki:2
    container_name: wikijs
    hostname: wikijs
    restart: unless-stopped
    user: $PUID:$PGID
    networks:
      - $NETWORK
    expose:
      - 3000
    volumes:
      - $OPDIR/wikijs/config.yml:/wiki/config.yml
      - $OPDIR/wikijs/backup:/wiki/backup
    labels:
      traefik.enable: true
      traefik.http.routers.wikijs.entrypoints: websecure
      traefik.http.routers.wikijs.rule: Host(`wiki.$DOMAIN`)
      flame.type: application
      flame.name: wikijs
      flame.url: https://wiki.$DOMAIN
      flame.icon: flower-tulip
    environment:
      TZ: $TZ
      CONFIG_FILE: /wiki/config.yml
    depends_on:
      - postgres-wikijs

  postgres-wikijs:
    image: postgres:11-alpine
    container_name: postgres-wikijs
    restart: unless-stopped
    user: $PUID:$PGID # postgres will not init database as 1000:1000
    networks:
      - $NETWORK
    expose:
      - 5432
    volumes:
      - $OPDIR/postgres-wikijs:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: wiki
      POSTGRES_USER: wikijs
      POSTGRES_PASSWORD: $WIKIJS_POSTGRES_PASSWORD

  foundry-kirkwall:
    image: felddy/foundryvtt:release
    container_name: foundry-kirkwall
    hostname: foundry-kirkwall
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 30000
    volumes:
      - $OPDIR/kirkwall:/data
    labels:
      traefik.enable: true
      traefik.http.routers.kirkwall.entrypoints: websecure
      traefik.http.routers.kirkwall.rule: Host(`kirkwall.$DOMAIN`)
      flame.type: application
      flame.name: foundry/kirkwall
      flame.url: https://kirkwall.$DOMAIN
      flame.icon: anvil
    environment:
      TIMEZONE: $TZ
      FOUNDRY_UID: $PUID
      FOUNDRY_GID: $PGID
      FOUNDRY_HOSTNAME: kirkwall.$DOMAIN
    env_file: $OPDIR/kirkwall/config.env

  foundry-afterstory:
    image: felddy/foundryvtt:release
    container_name: foundry-afterstory
    hostname: foundry-afterstory
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 30000
    volumes:
      - $OPDIR/afterstory:/data
    labels:
      traefik.enable: true
      traefik.http.routers.afterstory.entrypoints: websecure
      traefik.http.routers.afterstory.rule: Host(`afterstory.$DOMAIN`)
      flame.type: application
      flame.name: foundry/afterstory
      flame.url: https://afterstory.$DOMAIN
      flame.icon: anvil
    environment:
      TIMEZONE: $TZ
      FOUNDRY_UID: $PUID
      FOUNDRY_GID: $PGID
      FOUNDRY_HOSTNAME: afterstory.$DOMAIN
    env_file: $OPDIR/afterstory/config.env

  # Media
  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    hostname: tautulli
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 8181
    volumes:
      - $OPDIR/tautulli:/config
    labels:
      traefik.enable: true
      traefik.http.routers.tautulli.entrypoints: websecure
      traefik.http.routers.tautulli.rule: Host(`tautulli.$DOMAIN`)
      flame.type: application
      flame.name: tautulli
      flame.url: https://tautulli.$DOMAIN
      flame.icon: alphabet-greek
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID

  overseerr:
    image: sctx/overseerr:latest
    container_name: overseerr
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 5055
    volumes:
      - $OPDIR/overseerr:/app/config
    labels:
      traefik.enable: true
      traefik.http.routers.overseerr.entrypoints: websecure
      traefik.http.routers.overseerr.rule: Host(`requests.$DOMAIN`)
      flame.type: application
      flame.name: overseerr
      flame.url: https://requests.$DOMAIN
      flame.icon: eye
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID

  owncast:
    image: gabekangas/owncast:latest
    container_name: owncast
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 8080
    ports:
      - 1935:1935 # RSTP is protected by tailscale, not traefik
    volumes:
      - $OPDIR/owncast:/app/data
    labels:
      traefik.enable: true
      traefik.http.routers.owncast.entrypoints: websecure
      traefik.http.routers.owncast.rule: Host(`stream.$DOMAIN`)
      traefik.http.services.owncast.loadbalancer.server.port: 8080
      flame.type: application
      flame.name: owncast
      flame.url: https://stream.$DOMAIN
      flame.icon: twitch
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID

  nextcloud:
    image: lscr.io/linuxserver/nextcloud:latest
    container_name: nextcloud
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 443
    volumes:
      - $OPDIR/nextcloud/appdata:/config
      - $OPDIR/nextcloud/data:/data
    labels:
      traefik.enable: true
      traefik.http.routers.nextcloud.entrypoints: websecure
      traefik.http.routers.nextcloud.rule: Host(`cloud.$DOMAIN`)
      flame.type: application
      flame.name: nextcloud
      flame.url: https://cloud.$DOMAIN
      flame.icon: cloud-outline
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID

  xbackbone:
    image: lscr.io/linuxserver/xbackbone:latest
    container_name: xbackbone
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 80
    volumes:
      - $OPDIR/xbackbone:/config
    labels:
      traefik.enable: true
      traefik.http.routers.xbackbone.entrypoints: websecure
      traefik.http.routers.xbackbone.rule: Host(`x.$DOMAIN`)
      flame.type: application
      flame.name: xbackbone
      flame.url: https://x.$DOMAIN
      flame.icon: export-variant
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID

  # Other
  code-ereinion:
    image: lscr.io/linuxserver/code-server:latest
    container_name: code-ereinion
    hostname: code-ereinion
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 8443
    volumes:
      - $OPDIR/code:/config
      - $OPDIR:/opt
    labels:
      traefik.enable: true
      traefik.http.routers.code-server.entrypoints: websecure
      traefik.http.routers.code-server.rule: Host(`code-e.$DOMAIN`)
      traefik.http.routers.code-server.middlewares: authelia@file
      flame.type: application
      flame.name: code-server
      flame.url: https://code-e.$DOMAIN
      flame.icon: code-braces
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID

  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: jupyter
    hostname: jupyter
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 8888
    volumes:
      - $OPDIR/jupyter:/home/jovyan
      - $OPDIR/nginx/www/jupyter:/home/jovyan/www
    labels:
      traefik.enable: true
      traefik.http.routers.jupyter.entrypoints: websecure
      traefik.http.routers.jupyter.rule: Host(`jupyter.$DOMAIN`)
      traefik.http.routers.jupyter.middlewares: authelia@file
      flame.type: application
      flame.name: jupyter
      flame.url: https://jupyter.$DOMAIN
      flame.icon: language-python
      ofelia.enabled: "true"
      ofelia.job-exec.manifold-stats.user: "jovyan"
      ofelia.job-exec.manifold-stats.schedule: "@every 4h"
      ofelia.job-exec.manifold-stats.command: "/bin/bash /home/jovyan/Manifold/render.sh"
      ofelia.job-exec.manifold-mirror.user: "jovyan"
      ofelia.job-exec.manifold-mirror.schedule: "@every 15m"
      ofelia.job-exec.manifold-mirror.command: "jupyter nbconvert --to notebook --execute /home/jovyan/Manifold/Mastodon/Mastodon.ipynb"
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
      JUPYTER_ENABLE_LAB: yes

  flame:
    image: pawelmalak/flame:latest
    container_name: flame
    hostname: flame
    restart: unless-stopped
    networks:
      - $NETWORK
    volumes:
      - $OPDIR/flame:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      traefik.enable: true
      traefik.http.routers.flame.entrypoints: websecure
      traefik.http.routers.flame.rule: Host(`flame.$DOMAIN`)
    environment:
      TZ: $TZ
      PASSWORD: $FLAME_PASSWORD

  guacamole:
    image: guacamole/guacamole
    container_name: guacamole
    hostname: guacamole
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 8080
    labels:
      traefik.enable: true
      traefik.http.routers.guacamole.entrypoints: websecure
      traefik.http.routers.guacamole.rule: Host(`guacamole.$DOMAIN`)
      traefik.http.routers.guacamole.middlewares: authelia@file,guac-prefix@docker
      traefik.http.middlewares.guac-prefix.addprefix.prefix: /guacamole
      flame.type: application
      flame.name: guacamole
      flame.url: https://guacamole.$DOMAIN
      flame.icon: feather
    environment:
      TZ: $TZ
      HEADER_ENABLED: true
      HTTP_AUTH_HEADER: Remote-User
      GUACD_HOSTNAME: guacd
      POSTGRES_HOSTNAME: postgres-guacamole
      POSTGRES_DATABASE: guacamole
      POSTGRES_USER: guacamole
      POSTGRES_PASSWORD: $GUACAMOLE_POSTGRES_PASSWORD
    depends_on:
      - guacd
      - postgres-guacamole

  guacd:
    image: guacamole/guacd
    container_name: guacd
    hostname: guacd
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 4822

  postgres-guacamole:
    image: postgres:11-alpine
    container_name: postgres-guacamole
    hostname: postgres-guacamole
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 5432
    volumes:
      #- ./initdb.sql:/docker-entrypoint-initdb.d/initdb.sql:ro # for init only
      - $OPDIR/postgres-guacamole:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: guacamole
      POSTGRES_USER: guacamole
      POSTGRES_PASSWORD: $GUACAMOLE_POSTGRES_PASSWORD

  paperless:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless
    restart: unless-stopped
    networks:
      - $NETWORK
    expose:
      - 8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - $OPDIR/paperless/data:/usr/src/paperless/data
      - $OPDIR/paperless/media:/usr/src/paperless/media
      - $OPDIR/paperless/export:/usr/src/paperless/export
      - $OPDIR/paperless/consume:/usr/src/paperless/consume
    labels:
      traefik.enable: true
      traefik.http.routers.paperless.entrypoints: websecure
      traefik.http.routers.paperless.rule: Host(`paperless.$DOMAIN`)
      traefik.http.routers.paperless.middlewares: authelia@file
      traefik.http.routers.paperless-api.entrypoints: websecure
      traefik.http.routers.paperless-api.rule: "Host(`paperless.$DOMAIN`) && PathPrefix(`/api`)"
      flame.type: application
      flame.name: paperless
      flame.url: https://paperless.$DOMAIN
      flame.icon: file-outline
    environment:
      PAPERLESS_TIME_ZONE: $TZ
      USERMAP_UID: $PUID
      USERMAP_GID: $PGID
      PAPERLESS_REDIS: redis://redis-paperless:6379
      PAPERLESS_DBHOST: postgres-paperless
      PAPERLESS_POSTGRES_PASSWORD: $PAPERLESS_POSTGRES_PASSWORD
      PAPERLESS_URL: https://paperless.$DOMAIN
    env_file: $OPDIR/paperless/config.env
    depends_on:
      - redis-paperless
      - postgres-paperless

  redis-paperless:
    image: redis:6.0
    container_name: redis-paperless
    restart: unless-stopped
    networks:
      - $NETWORK
    volumes:
      - $OPDIR/redis-paperless:/data

  postgres-paperless:
    image: postgres:13
    container_name: postgres-paperless
    restart: unless-stopped
    networks:
      - $NETWORK
    volumes:
      - $OPDIR/postgres-paperless:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: $PAPERLESS_POSTGRES_PASSWORD

  ofelia:
    image: mcuadros/ofelia:latest
    container_name: ofelia
    restart: unless-stopped
    networks:
      - $NETWORK
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      ofelia.slack-webhook: $DISCORD_WEBHOOK
      ofelia.slack-only-on-error: true
    environment:
      TZ: $TZ